2020-04-23 19:26:23,417 - root - INFO - Hey I am loading net for you!
2020-04-23 19:26:23,419 - root - INFO - Setting hyper-parameters!
2020-04-23 19:26:23,420 - root - INFO - Starting training...
2020-04-23 19:26:24,429 - root - INFO - | Epoch: 001/150 | Train Time: 1.007s | Train Loss: 0.024107 |
2020-04-23 19:26:25,417 - root - INFO - | Epoch: 002/150 | Train Time: 0.988s | Train Loss: 0.023700 |
2020-04-23 19:26:26,463 - root - INFO - | Epoch: 003/150 | Train Time: 1.045s | Train Loss: 0.023817 |
2020-04-23 19:26:27,564 - root - INFO - | Epoch: 004/150 | Train Time: 1.100s | Train Loss: 0.023702 |
2020-04-23 19:26:28,570 - root - INFO - | Epoch: 005/150 | Train Time: 1.006s | Train Loss: 0.023766 |
2020-04-23 19:26:29,618 - root - INFO - | Epoch: 006/150 | Train Time: 1.047s | Train Loss: 0.023696 |
2020-04-23 19:26:30,597 - root - INFO - | Epoch: 007/150 | Train Time: 0.978s | Train Loss: 0.023742 |
2020-04-23 19:26:31,688 - root - INFO - | Epoch: 008/150 | Train Time: 1.090s | Train Loss: 0.023622 |
2020-04-23 19:26:32,726 - root - INFO - | Epoch: 009/150 | Train Time: 1.037s | Train Loss: 0.023536 |
2020-04-23 19:26:33,759 - root - INFO - | Epoch: 010/150 | Train Time: 1.032s | Train Loss: 0.023599 |
2020-04-23 19:26:34,810 - root - INFO - | Epoch: 011/150 | Train Time: 1.050s | Train Loss: 0.023547 |
2020-04-23 19:26:35,852 - root - INFO - | Epoch: 012/150 | Train Time: 1.041s | Train Loss: 0.023459 |
2020-04-23 19:26:36,858 - root - INFO - | Epoch: 013/150 | Train Time: 1.005s | Train Loss: 0.023438 |
2020-04-23 19:26:37,938 - root - INFO - | Epoch: 014/150 | Train Time: 1.079s | Train Loss: 0.023470 |
2020-04-23 19:26:39,041 - root - INFO - | Epoch: 015/150 | Train Time: 1.103s | Train Loss: 0.023474 |
2020-04-23 19:26:40,093 - root - INFO - | Epoch: 016/150 | Train Time: 1.051s | Train Loss: 0.023551 |
2020-04-23 19:26:41,108 - root - INFO - | Epoch: 017/150 | Train Time: 1.014s | Train Loss: 0.023496 |
2020-04-23 19:26:42,151 - root - INFO - | Epoch: 018/150 | Train Time: 1.042s | Train Loss: 0.023409 |
2020-04-23 19:26:43,138 - root - INFO - | Epoch: 019/150 | Train Time: 0.986s | Train Loss: 0.023370 |
2020-04-23 19:26:44,154 - root - INFO - | Epoch: 020/150 | Train Time: 1.015s | Train Loss: 0.023228 |
2020-04-23 19:26:45,198 - root - INFO - | Epoch: 021/150 | Train Time: 1.043s | Train Loss: 0.023299 |
2020-04-23 19:26:46,320 - root - INFO - | Epoch: 022/150 | Train Time: 1.121s | Train Loss: 0.023258 |
2020-04-23 19:26:47,440 - root - INFO - | Epoch: 023/150 | Train Time: 1.118s | Train Loss: 0.023257 |
2020-04-23 19:26:48,448 - root - INFO - | Epoch: 024/150 | Train Time: 1.008s | Train Loss: 0.023157 |
2020-04-23 19:26:49,458 - root - INFO - | Epoch: 025/150 | Train Time: 1.009s | Train Loss: 0.023123 |
2020-04-23 19:26:50,425 - root - INFO - | Epoch: 026/150 | Train Time: 0.966s | Train Loss: 0.023150 |
2020-04-23 19:26:51,452 - root - INFO - | Epoch: 027/150 | Train Time: 1.027s | Train Loss: 0.023132 |
2020-04-23 19:26:52,472 - root - INFO - | Epoch: 028/150 | Train Time: 1.019s | Train Loss: 0.023247 |
2020-04-23 19:26:53,458 - root - INFO - | Epoch: 029/150 | Train Time: 0.986s | Train Loss: 0.023090 |
2020-04-23 19:26:54,453 - root - INFO - | Epoch: 030/150 | Train Time: 0.994s | Train Loss: 0.023011 |
2020-04-23 19:26:55,423 - root - INFO - | Epoch: 031/150 | Train Time: 0.968s | Train Loss: 0.023097 |
2020-04-23 19:26:56,356 - root - INFO - | Epoch: 032/150 | Train Time: 0.929s | Train Loss: 0.022861 |
2020-04-23 19:26:57,448 - root - INFO - | Epoch: 033/150 | Train Time: 1.091s | Train Loss: 0.023063 |
2020-04-23 19:26:58,425 - root - INFO - | Epoch: 034/150 | Train Time: 0.976s | Train Loss: 0.023129 |
2020-04-23 19:26:59,502 - root - INFO - | Epoch: 035/150 | Train Time: 1.076s | Train Loss: 0.022986 |
2020-04-23 19:27:00,576 - root - INFO - | Epoch: 036/150 | Train Time: 1.074s | Train Loss: 0.022827 |
2020-04-23 19:27:01,540 - root - INFO - | Epoch: 037/150 | Train Time: 0.962s | Train Loss: 0.023043 |
2020-04-23 19:27:02,523 - root - INFO - | Epoch: 038/150 | Train Time: 0.983s | Train Loss: 0.023023 |
2020-04-23 19:27:03,516 - root - INFO - | Epoch: 039/150 | Train Time: 0.992s | Train Loss: 0.023081 |
2020-04-23 19:27:04,580 - root - INFO - | Epoch: 040/150 | Train Time: 1.063s | Train Loss: 0.022853 |
2020-04-23 19:27:05,694 - root - INFO - | Epoch: 041/150 | Train Time: 1.113s | Train Loss: 0.022842 |
2020-04-23 19:27:06,810 - root - INFO - | Epoch: 042/150 | Train Time: 1.115s | Train Loss: 0.022984 |
2020-04-23 19:27:07,917 - root - INFO - | Epoch: 043/150 | Train Time: 1.106s | Train Loss: 0.022840 |
2020-04-23 19:27:08,899 - root - INFO - | Epoch: 044/150 | Train Time: 0.980s | Train Loss: 0.022699 |
2020-04-23 19:27:09,960 - root - INFO - | Epoch: 045/150 | Train Time: 1.061s | Train Loss: 0.022801 |
2020-04-23 19:27:10,988 - root - INFO - | Epoch: 046/150 | Train Time: 1.026s | Train Loss: 0.022680 |
2020-04-23 19:27:11,940 - root - INFO - | Epoch: 047/150 | Train Time: 0.951s | Train Loss: 0.022737 |
2020-04-23 19:27:13,050 - root - INFO - | Epoch: 048/150 | Train Time: 1.109s | Train Loss: 0.022721 |
2020-04-23 19:27:14,098 - root - INFO - | Epoch: 049/150 | Train Time: 1.048s | Train Loss: 0.022790 |
2020-04-23 19:27:15,060 - root - INFO - | Epoch: 050/150 | Train Time: 0.961s | Train Loss: 0.022716 |
2020-04-23 19:27:15,060 - root - INFO -   LR scheduler: new learning rate is 1e-06
2020-04-23 19:27:16,161 - root - INFO - | Epoch: 051/150 | Train Time: 1.100s | Train Loss: 0.022596 |
2020-04-23 19:27:17,129 - root - INFO - | Epoch: 052/150 | Train Time: 0.967s | Train Loss: 0.022379 |
2020-04-23 19:27:18,239 - root - INFO - | Epoch: 053/150 | Train Time: 1.110s | Train Loss: 0.022510 |
2020-04-23 19:27:19,254 - root - INFO - | Epoch: 054/150 | Train Time: 1.014s | Train Loss: 0.022489 |
2020-04-23 19:27:20,275 - root - INFO - | Epoch: 055/150 | Train Time: 1.019s | Train Loss: 0.022343 |
2020-04-23 19:27:21,260 - root - INFO - | Epoch: 056/150 | Train Time: 0.984s | Train Loss: 0.022432 |
2020-04-23 19:27:22,462 - root - INFO - | Epoch: 057/150 | Train Time: 1.201s | Train Loss: 0.022394 |
2020-04-23 19:27:23,573 - root - INFO - | Epoch: 058/150 | Train Time: 1.110s | Train Loss: 0.022366 |
2020-04-23 19:27:24,634 - root - INFO - | Epoch: 059/150 | Train Time: 1.060s | Train Loss: 0.022354 |
2020-04-23 19:27:25,606 - root - INFO - | Epoch: 060/150 | Train Time: 0.971s | Train Loss: 0.022468 |
2020-04-23 19:27:26,657 - root - INFO - | Epoch: 061/150 | Train Time: 1.050s | Train Loss: 0.022349 |
2020-04-23 19:27:27,695 - root - INFO - | Epoch: 062/150 | Train Time: 1.038s | Train Loss: 0.022360 |
2020-04-23 19:27:28,847 - root - INFO - | Epoch: 063/150 | Train Time: 1.151s | Train Loss: 0.022336 |
2020-04-23 19:27:29,818 - root - INFO - | Epoch: 064/150 | Train Time: 0.970s | Train Loss: 0.022395 |
2020-04-23 19:27:30,823 - root - INFO - | Epoch: 065/150 | Train Time: 1.004s | Train Loss: 0.022329 |
2020-04-23 19:27:31,814 - root - INFO - | Epoch: 066/150 | Train Time: 0.990s | Train Loss: 0.022453 |
2020-04-23 19:27:32,781 - root - INFO - | Epoch: 067/150 | Train Time: 0.966s | Train Loss: 0.022321 |
2020-04-23 19:27:33,786 - root - INFO - | Epoch: 068/150 | Train Time: 1.004s | Train Loss: 0.022315 |
2020-04-23 19:27:34,798 - root - INFO - | Epoch: 069/150 | Train Time: 1.012s | Train Loss: 0.022379 |
2020-04-23 19:27:35,919 - root - INFO - | Epoch: 070/150 | Train Time: 1.119s | Train Loss: 0.022494 |
2020-04-23 19:27:36,914 - root - INFO - | Epoch: 071/150 | Train Time: 0.995s | Train Loss: 0.022276 |
2020-04-23 19:27:37,918 - root - INFO - | Epoch: 072/150 | Train Time: 1.003s | Train Loss: 0.022326 |
2020-04-23 19:27:38,980 - root - INFO - | Epoch: 073/150 | Train Time: 1.061s | Train Loss: 0.022350 |
2020-04-23 19:27:40,015 - root - INFO - | Epoch: 074/150 | Train Time: 1.034s | Train Loss: 0.022419 |
2020-04-23 19:27:41,084 - root - INFO - | Epoch: 075/150 | Train Time: 1.068s | Train Loss: 0.022463 |
2020-04-23 19:27:42,094 - root - INFO - | Epoch: 076/150 | Train Time: 1.010s | Train Loss: 0.022324 |
2020-04-23 19:27:43,074 - root - INFO - | Epoch: 077/150 | Train Time: 0.978s | Train Loss: 0.022281 |
2020-04-23 19:27:44,081 - root - INFO - | Epoch: 078/150 | Train Time: 1.006s | Train Loss: 0.022398 |
2020-04-23 19:27:45,053 - root - INFO - | Epoch: 079/150 | Train Time: 0.971s | Train Loss: 0.022306 |
2020-04-23 19:27:46,082 - root - INFO - | Epoch: 080/150 | Train Time: 1.029s | Train Loss: 0.022253 |
2020-04-23 19:27:47,178 - root - INFO - | Epoch: 081/150 | Train Time: 1.095s | Train Loss: 0.022331 |
2020-04-23 19:27:48,152 - root - INFO - | Epoch: 082/150 | Train Time: 0.973s | Train Loss: 0.022368 |
2020-04-23 19:27:49,189 - root - INFO - | Epoch: 083/150 | Train Time: 1.036s | Train Loss: 0.022289 |
2020-04-23 19:27:50,200 - root - INFO - | Epoch: 084/150 | Train Time: 1.010s | Train Loss: 0.022434 |
2020-04-23 19:27:51,250 - root - INFO - | Epoch: 085/150 | Train Time: 1.050s | Train Loss: 0.022225 |
2020-04-23 19:27:52,218 - root - INFO - | Epoch: 086/150 | Train Time: 0.966s | Train Loss: 0.022154 |
2020-04-23 19:27:53,275 - root - INFO - | Epoch: 087/150 | Train Time: 1.057s | Train Loss: 0.022287 |
2020-04-23 19:27:54,282 - root - INFO - | Epoch: 088/150 | Train Time: 1.006s | Train Loss: 0.022334 |
2020-04-23 19:27:55,377 - root - INFO - | Epoch: 089/150 | Train Time: 1.095s | Train Loss: 0.022226 |
2020-04-23 19:27:56,411 - root - INFO - | Epoch: 090/150 | Train Time: 1.033s | Train Loss: 0.022282 |
2020-04-23 19:27:57,430 - root - INFO - | Epoch: 091/150 | Train Time: 1.018s | Train Loss: 0.022250 |
2020-04-23 19:27:58,460 - root - INFO - | Epoch: 092/150 | Train Time: 1.029s | Train Loss: 0.022306 |
2020-04-23 19:27:59,454 - root - INFO - | Epoch: 093/150 | Train Time: 0.993s | Train Loss: 0.022265 |
2020-04-23 19:28:00,446 - root - INFO - | Epoch: 094/150 | Train Time: 0.991s | Train Loss: 0.022278 |
2020-04-23 19:28:01,446 - root - INFO - | Epoch: 095/150 | Train Time: 0.999s | Train Loss: 0.022459 |
2020-04-23 19:28:02,504 - root - INFO - | Epoch: 096/150 | Train Time: 1.057s | Train Loss: 0.022337 |
2020-04-23 19:28:03,558 - root - INFO - | Epoch: 097/150 | Train Time: 1.053s | Train Loss: 0.022203 |
2020-04-23 19:28:04,554 - root - INFO - | Epoch: 098/150 | Train Time: 0.995s | Train Loss: 0.022237 |
2020-04-23 19:28:05,614 - root - INFO - | Epoch: 099/150 | Train Time: 1.059s | Train Loss: 0.022233 |
2020-04-23 19:28:06,637 - root - INFO - | Epoch: 100/150 | Train Time: 1.022s | Train Loss: 0.022357 |
2020-04-23 19:28:06,638 - root - INFO -   LR scheduler: new learning rate is 1e-07
2020-04-23 19:28:07,653 - root - INFO - | Epoch: 101/150 | Train Time: 1.013s | Train Loss: 0.022213 |
2020-04-23 19:28:08,715 - root - INFO - | Epoch: 102/150 | Train Time: 1.061s | Train Loss: 0.022315 |
2020-04-23 19:28:09,757 - root - INFO - | Epoch: 103/150 | Train Time: 1.041s | Train Loss: 0.022189 |
2020-04-23 19:28:10,806 - root - INFO - | Epoch: 104/150 | Train Time: 1.048s | Train Loss: 0.022099 |
2020-04-23 19:28:11,975 - root - INFO - | Epoch: 105/150 | Train Time: 1.168s | Train Loss: 0.022300 |
2020-04-23 19:28:12,980 - root - INFO - | Epoch: 106/150 | Train Time: 1.004s | Train Loss: 0.022300 |
2020-04-23 19:28:14,058 - root - INFO - | Epoch: 107/150 | Train Time: 1.077s | Train Loss: 0.022202 |
2020-04-23 19:28:15,100 - root - INFO - | Epoch: 108/150 | Train Time: 1.041s | Train Loss: 0.022160 |
2020-04-23 19:28:16,254 - root - INFO - | Epoch: 109/150 | Train Time: 1.153s | Train Loss: 0.022285 |
2020-04-23 19:28:17,301 - root - INFO - | Epoch: 110/150 | Train Time: 1.046s | Train Loss: 0.022304 |
2020-04-23 19:28:18,339 - root - INFO - | Epoch: 111/150 | Train Time: 1.037s | Train Loss: 0.022239 |
2020-04-23 19:28:19,286 - root - INFO - | Epoch: 112/150 | Train Time: 0.946s | Train Loss: 0.022292 |
2020-04-23 19:28:20,230 - root - INFO - | Epoch: 113/150 | Train Time: 0.943s | Train Loss: 0.022234 |
2020-04-23 19:28:21,259 - root - INFO - | Epoch: 114/150 | Train Time: 1.028s | Train Loss: 0.022209 |
2020-04-23 19:28:22,236 - root - INFO - | Epoch: 115/150 | Train Time: 0.975s | Train Loss: 0.022378 |
2020-04-23 19:28:23,203 - root - INFO - | Epoch: 116/150 | Train Time: 0.966s | Train Loss: 0.022294 |
2020-04-23 19:28:24,210 - root - INFO - | Epoch: 117/150 | Train Time: 1.007s | Train Loss: 0.022113 |
2020-04-23 19:28:25,262 - root - INFO - | Epoch: 118/150 | Train Time: 1.051s | Train Loss: 0.022217 |
2020-04-23 19:28:26,351 - root - INFO - | Epoch: 119/150 | Train Time: 1.088s | Train Loss: 0.022329 |
2020-04-23 19:28:27,414 - root - INFO - | Epoch: 120/150 | Train Time: 1.062s | Train Loss: 0.022310 |
2020-04-23 19:28:28,466 - root - INFO - | Epoch: 121/150 | Train Time: 1.051s | Train Loss: 0.022367 |
2020-04-23 19:28:29,499 - root - INFO - | Epoch: 122/150 | Train Time: 1.033s | Train Loss: 0.022203 |
2020-04-23 19:28:30,619 - root - INFO - | Epoch: 123/150 | Train Time: 1.119s | Train Loss: 0.022172 |
2020-04-23 19:28:31,754 - root - INFO - | Epoch: 124/150 | Train Time: 1.134s | Train Loss: 0.022164 |
2020-04-23 19:28:32,829 - root - INFO - | Epoch: 125/150 | Train Time: 1.074s | Train Loss: 0.022293 |
2020-04-23 19:28:33,886 - root - INFO - | Epoch: 126/150 | Train Time: 1.056s | Train Loss: 0.022237 |
2020-04-23 19:28:34,883 - root - INFO - | Epoch: 127/150 | Train Time: 0.996s | Train Loss: 0.022225 |
2020-04-23 19:28:35,917 - root - INFO - | Epoch: 128/150 | Train Time: 1.033s | Train Loss: 0.022163 |
2020-04-23 19:28:36,993 - root - INFO - | Epoch: 129/150 | Train Time: 1.075s | Train Loss: 0.022318 |
2020-04-23 19:28:38,008 - root - INFO - | Epoch: 130/150 | Train Time: 1.014s | Train Loss: 0.022231 |
2020-04-23 19:28:38,998 - root - INFO - | Epoch: 131/150 | Train Time: 0.989s | Train Loss: 0.022256 |
2020-04-23 19:28:39,972 - root - INFO - | Epoch: 132/150 | Train Time: 0.973s | Train Loss: 0.022256 |
2020-04-23 19:28:41,038 - root - INFO - | Epoch: 133/150 | Train Time: 1.065s | Train Loss: 0.022139 |
2020-04-23 19:28:42,024 - root - INFO - | Epoch: 134/150 | Train Time: 0.984s | Train Loss: 0.022206 |
2020-04-23 19:28:43,034 - root - INFO - | Epoch: 135/150 | Train Time: 1.009s | Train Loss: 0.022329 |
2020-04-23 19:28:44,102 - root - INFO - | Epoch: 136/150 | Train Time: 1.068s | Train Loss: 0.022094 |
2020-04-23 19:28:45,181 - root - INFO - | Epoch: 137/150 | Train Time: 1.078s | Train Loss: 0.022176 |
2020-04-23 19:28:46,190 - root - INFO - | Epoch: 138/150 | Train Time: 1.008s | Train Loss: 0.022285 |
2020-04-23 19:28:47,185 - root - INFO - | Epoch: 139/150 | Train Time: 0.993s | Train Loss: 0.022298 |
2020-04-23 19:28:48,246 - root - INFO - | Epoch: 140/150 | Train Time: 1.061s | Train Loss: 0.022146 |
2020-04-23 19:28:49,321 - root - INFO - | Epoch: 141/150 | Train Time: 1.074s | Train Loss: 0.022321 |
2020-04-23 19:28:50,281 - root - INFO - | Epoch: 142/150 | Train Time: 0.959s | Train Loss: 0.022175 |
2020-04-23 19:28:51,331 - root - INFO - | Epoch: 143/150 | Train Time: 1.049s | Train Loss: 0.022323 |
2020-04-23 19:28:52,401 - root - INFO - | Epoch: 144/150 | Train Time: 1.069s | Train Loss: 0.022284 |
2020-04-23 19:28:53,466 - root - INFO - | Epoch: 145/150 | Train Time: 1.065s | Train Loss: 0.022180 |
2020-04-23 19:28:54,512 - root - INFO - | Epoch: 146/150 | Train Time: 1.045s | Train Loss: 0.022169 |
2020-04-23 19:28:55,615 - root - INFO - | Epoch: 147/150 | Train Time: 1.101s | Train Loss: 0.022148 |
2020-04-23 19:28:56,543 - root - INFO - | Epoch: 148/150 | Train Time: 0.927s | Train Loss: 0.022352 |
2020-04-23 19:28:57,518 - root - INFO - | Epoch: 149/150 | Train Time: 0.974s | Train Loss: 0.022149 |
2020-04-23 19:28:58,669 - root - INFO - | Epoch: 150/150 | Train Time: 1.151s | Train Loss: 0.022302 |
2020-04-23 19:28:58,670 - root - INFO - Training Time: 155.249s
2020-04-23 19:28:58,671 - root - INFO - Finished training.
2020-04-23 19:29:22,450 - root - INFO - Starting testing...
2020-04-23 19:29:22,617 - root - INFO - Test Time: 0.166s
2020-04-23 19:29:22,618 - root - INFO - Finished testing.
2020-04-23 20:32:49,757 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:32:49,772 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:32:49,791 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:32:49,820 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:32:49,848 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:32:49,877 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:32:49,906 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:32:49,935 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:32:49,964 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:32:49,993 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:43:23,560 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:43:23,588 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:43:23,615 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:43:23,642 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:43:23,672 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:43:23,701 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:43:23,728 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:43:23,755 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:43:23,783 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:43:23,811 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:43:57,288 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:43:57,312 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:43:57,336 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:43:57,354 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:43:57,372 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:43:57,404 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:43:57,436 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:43:57,469 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:43:57,503 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:43:57,528 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:00,144 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:00,168 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:00,192 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:00,217 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:00,242 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:00,269 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:00,295 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:00,322 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:00,350 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:00,379 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:32,937 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:32,946 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:32,982 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:32,991 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:33,025 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:33,035 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:33,082 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:33,092 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:33,135 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:33,145 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:33,190 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:33,200 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:33,245 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:33,254 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:33,299 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:33,315 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:33,362 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:33,372 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:33,413 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:45:33,421 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:48:23,002 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:48:23,012 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:48:23,031 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:48:23,036 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:48:23,060 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:48:23,066 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:48:23,088 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:48:23,095 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:48:23,129 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:48:23,138 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:48:23,175 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:48:23,183 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:48:23,220 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:48:23,228 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:48:23,267 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:48:23,276 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:08,314 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:08,322 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:08,355 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:08,366 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:08,408 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:08,418 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:08,461 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:08,471 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:08,518 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:08,528 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:08,572 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:08,582 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:08,627 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:08,637 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:08,683 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:08,692 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:08,740 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:08,752 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:08,800 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:08,809 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:55,354 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:55,364 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:55,395 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:55,402 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:55,435 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:55,442 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:55,475 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:55,481 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:55,503 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:55,509 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:55,539 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:55,547 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:55,588 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:55,593 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:55,639 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:55,648 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:55,677 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:55,685 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:55,726 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
2020-04-23 20:49:55,734 - matplotlib.axes._axes - WARNING - 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
